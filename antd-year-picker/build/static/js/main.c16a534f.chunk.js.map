{"version":3,"sources":["YearPicker.jsx","App.js","serviceWorker.js","index.js"],"names":["YearPicker","react_default","a","createElement","date_picker","Object","assign","this","props","format","mode","Component","App","state","open","date","handleChange","_this","setState","form","setFieldsValue","handleOpenChange","handleReset","resetFields","_this$props$form","getFieldDecorator","getFieldValue","className","style","paddingTop","es_form","layout","Item","src_YearPicker","onOpenChange","onPanelChange","margin","es_button","type","onClick","src_App_0","create","name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAeeA,mLAVX,OACEC,EAAAC,EAAAC,cAAAC,EAAA,EAAAC,OAAAC,OAAA,GACMC,KAAKC,MADX,CAEEC,OAAO,OACPC,KAAK,iBANYC,aCEnBC,6MACJC,MAAQ,CACNC,MAAM,EACNC,KAAM,QAKRC,aAAe,SAAAD,GACbE,EAAKC,SAAS,CAAEJ,MAAM,IACtBG,EAAKT,MAAMW,KAAKC,eAAe,CAAEL,YAMnCM,iBAAmB,SAAAP,GACjBG,EAAKC,SAAS,CAAEJ,YAMlBQ,YAAc,WACZL,EAAKT,MAAMW,KAAKI,uFAGT,IAAAC,EACsCjB,KAAKC,MAAMW,KAAhDM,EADDD,EACCC,kBACFV,GAAOW,EAFNF,EACoBE,eACA,QAC3B,OACEzB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,MAAMC,MAAO,CAAEC,WAAY,UACxC5B,EAAAC,EAAAC,cAAA2B,EAAA,GAAMC,OAAO,UACX9B,EAAAC,EAAAC,cAAA2B,EAAA,EAAME,KAAN,KACGP,EAAkB,OAAQ,GAA1BA,CACCxB,EAAAC,EAAAC,cAAC8B,EAAD,CACEnB,KAAMP,KAAKM,MAAMC,KACjBoB,aAAc3B,KAAKc,iBACnBc,cAAe5B,KAAKS,gBAGxBf,EAAAC,EAAAC,cAAA,OAAKyB,MAAO,CAAEQ,OAAQ,WAAtB,iCACQrB,EAAOA,EAAKN,OAAO,QAAU,uBAGvCR,EAAAC,EAAAC,cAAA2B,EAAA,EAAME,KAAN,KACE/B,EAAAC,EAAAC,cAAAkC,EAAA,GAAQC,KAAK,UAAUC,QAAShC,KAAKe,aAArC,mBA9CMX,aAwDH6B,EAAAV,EAAA,EAAKW,OAAO,CAAEC,KAAM,kBAApB,CAAwC9B,GCjDnC+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAACqC,EAAD,MAASU,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c16a534f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { DatePicker } from 'antd';\r\n\r\nclass YearPicker extends Component {\r\n  render() {\r\n    return (\r\n      <DatePicker\r\n        {...this.props}\r\n        format='YYYY'\r\n        mode='year'\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default YearPicker;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Form, Button } from 'antd';\nimport YearPicker from './YearPicker';\n\nclass App extends Component {\n  state = {\n    open: false,\n    date: null\n  };\n  /**\n   * datePicker change handler\n   */\n  handleChange = date => {\n    this.setState({ open: false });\n    this.props.form.setFieldsValue({ date });\n  };\n\n  /**\n   * set datePicker open status\n   */\n  handleOpenChange = open => {\n    this.setState({ open });\n  };\n\n  /**\n   * form reset handler\n   */\n  handleReset = () => {\n    this.props.form.resetFields();\n  };\n\n  render() {\n    const { getFieldDecorator, getFieldValue } = this.props.form;\n    const date = getFieldValue('date');\n    return (\n      <div className='App' style={{ paddingTop: '150px' }}>\n        <Form layout='inline'>\n          <Form.Item>\n            {getFieldDecorator('date', {})(\n              <YearPicker\n                open={this.state.open}\n                onOpenChange={this.handleOpenChange}\n                onPanelChange={this.handleChange}\n              />\n            )}\n            <div style={{ margin: '10px 0' }}>\n              当前日期：{date ? date.format('YYYY') : '未选择'}\n            </div>\n          </Form.Item>\n          <Form.Item>\n            <Button type='primary' onClick={this.handleReset}>\n              Reset\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default Form.create({ name: 'datePickerDemo' })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}