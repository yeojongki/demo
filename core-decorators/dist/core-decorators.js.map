{"version":3,"file":"core-decorators.js","sources":["../src/autobind.js","../src/index.js"],"sourcesContent":["export function autobindClsx(clsx) {\r\n  const descriptors = Object.getOwnPropertyDescriptors(clsx.prototype)\r\n  const names = Object.getOwnPropertyNames(clsx.prototype)\r\n\r\n  names.forEach(method => {\r\n    const desc = descriptors[method]\r\n    if (method !== 'constructor') {\r\n      Object.defineProperty(clsx.prototype, method, autobindMethod(clsx.prototype, method, desc))\r\n    }\r\n  })\r\n}\r\n\r\nexport function autobindMethod(target, method, discriptor) {\r\n  const { value: fn } = discriptor\r\n  return {\r\n    get() {\r\n      const boundFn = fn.bind(this)\r\n      Object.defineProperty(this, method, {\r\n        value: boundFn,\r\n      })\r\n      return boundFn\r\n    }\r\n  }\r\n}\r\n\r\nexport default function autobind(...args) {\r\n  if (args.length === 1) {\r\n    return autobindClsx(args[0])\r\n  } else {\r\n    return autobindMethod(...args)\r\n  }\r\n}\r\n","// import { autobind } from 'core-decorators'\r\nimport autobind from './autobind'\r\nimport memoize from './memoize'\r\n\r\n// // 1. memoize\r\n// class Person {\r\n//   @memoize(\"anotherMethod\")\r\n//   doBigCalcFn() {\r\n//     return 123456789\r\n//   }\r\n\r\n//   anotherMethod() {\r\n//     return 666\r\n//   }\r\n// }\r\n\r\n// const { doBigCalcFn } = new Person()\r\n// console.log(doBigCalcFn())\r\n// console.log(doBigCalcFn())\r\n\r\n/*******************************************************************/\r\n\r\n// 2. autobind (class / method)\r\n@autobind\r\nclass Person {\r\n  // @autobind\r\n  getInstance() {\r\n    return this\r\n  }\r\n\r\n  anotherGetInstance() {\r\n    return this\r\n  }\r\n}\r\n\r\nconst person = new Person()\r\nconst { getInstance, anotherGetInstance } = person\r\nconst p1 = getInstance()\r\nconst p2 = anotherGetInstance()\r\nconsole.log(person === p1) // true\r\nconsole.log(person === p2) // true\r\nconsole.log(p1 === p2) // true\r\nconsole.log(person === p1 === p2) // false why?\r\n\r\nexport default Person\r\n"],"names":["autobindClsx","clsx","descriptors","Object","getOwnPropertyDescriptors","prototype","names","getOwnPropertyNames","forEach","method","desc","defineProperty","autobindMethod","target","discriptor","fn","value","get","boundFn","bind","autobind","length","Person","person","getInstance","anotherGetInstance","p1","p2","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAO,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AACjC,MAAMC,WAAW,GAAGC,MAAM,CAACC,yBAAP,CAAiCH,IAAI,CAACI,SAAtC,CAApB;AACA,MAAMC,KAAK,GAAGH,MAAM,CAACI,mBAAP,CAA2BN,IAAI,CAACI,SAAhC,CAAd;AAEAC,EAAAA,KAAK,CAACE,OAAN,CAAc,UAAAC,MAAM,EAAI;AACtB,QAAMC,IAAI,GAAGR,WAAW,CAACO,MAAD,CAAxB;;AACA,QAAIA,MAAM,KAAK,aAAf,EAA8B;AAC5BN,MAAAA,MAAM,CAACQ,cAAP,CAAsBV,IAAI,CAACI,SAA3B,EAAsCI,MAAtC,EAA8CG,cAAc,CAACX,IAAI,CAACI,SAAN,EAAiBI,MAAjB,EAAyBC,IAAzB,CAA5D;AACD;AACF,GALD;AAMD;AAEM,SAASE,cAAT,CAAwBC,MAAxB,EAAgCJ,MAAhC,EAAwCK,UAAxC,EAAoD;AAAA,MAC1CC,EAD0C,GACnCD,UADmC,CACjDE,KADiD;AAEzD,SAAO;AACLC,IAAAA,GADK,iBACC;AACJ,UAAMC,OAAO,GAAGH,EAAE,CAACI,IAAH,CAAQ,IAAR,CAAhB;AACAhB,MAAAA,MAAM,CAACQ,cAAP,CAAsB,IAAtB,EAA4BF,MAA5B,EAAoC;AAClCO,QAAAA,KAAK,EAAEE;AAD2B,OAApC;AAGA,aAAOA,OAAP;AACD;AAPI,GAAP;AASD;AAEc,SAASE,QAAT,GAA2B;AACxC,MAAI,UAAKC,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAOrB,YAAY,kDAAnB;AACD,GAFD,MAEO;AACL,WAAOY,cAAc,MAAd,mBAAP;AACD;AACF;;;AC1BD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AAEA;;IAEMU,SADLF;;;;;;;AAEC;kCACc;AACZ,aAAO,IAAP;AACD;;;yCAEoB;AACnB,aAAO,IAAP;AACD;;;;;;AAGH,IAAMG,MAAM,GAAG,IAAID,MAAJ,EAAf;IACQE,cAAoCD,OAApCC;IAAaC,qBAAuBF,OAAvBE;AACrB,IAAMC,EAAE,GAAGF,WAAW,EAAtB;AACA,IAAMG,EAAE,GAAGF,kBAAkB,EAA7B;AACAG,OAAO,CAACC,GAAR,CAAYN,MAAM,KAAKG,EAAvB;;AACAE,OAAO,CAACC,GAAR,CAAYN,MAAM,KAAKI,EAAvB;;AACAC,OAAO,CAACC,GAAR,CAAYH,EAAE,KAAKC,EAAnB;;AACAC,OAAO,CAACC,GAAR,CAAYN,MAAM,KAAKG,EAAX,KAAkBC,EAA9B;;;;"}